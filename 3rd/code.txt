#include <Windows.h>
#include "nfapi.h"
#include "ServiceController.h"

#include "nfsdk2thread.h"
#include "nfsdk2helper.h"
#include "utils.h"
#include "logger.h"
#include "modehelper.h"

#include <QFile>

NFSDK2Thread::NFSDK2Thread()
{}

NFSDK2Thread::~NFSDK2Thread()
{
    requestInterruption();
}

void NFSDK2Thread::run()
{
    ConfigHelper *helper = Utils::getConfigHelper();

    QString _driverPath = Utils::getSystemDirectory() + "\\drivers\\netfilter2.sys";

    while (!isInterruptionRequested()) {
        if (!QFile::exists(_driverPath)) {
            QString version = Utils::getSystemVersion();
            QString driverName;

            if (version == "10.00")
                driverName = "win10.sys";
            else if (version == "6.3" || version == "6.2")
                driverName = "win8.sys";
            else if (version == "6.1" || version == "6.0")
                driverName = "win7.sys";
            else {
                Logger::error(QString("[NFSDK2] Unsupported system version: %1").arg(version));
            }

            QString systemDriverVersion = Utils::getFileVersion(_driverPath);
            QString binDriverVersion = Utils::getFileVersion(QDir::toNativeSeparators(Utils::getConfigPath() + QString("/bin/%1").arg(driverName)));

            if (systemDriverVersion != binDriverVersion) {
                Logger::info("[NFSDK2] Start updateing driver");

                nfapi::nf_unRegisterDriver("netfilter2");
                QFile::remove(_driverPath);
                NFSDK2Helper::installDriver();
            }
          } else {
              NFSDK2Helper::installDriver();
          }

        auto service = ServiceController{L"netfilter2"};
        if (service.GetStatus() == ServiceStatus::Running) {
            service.Stop();
            service.WaitForStatus(ServiceStatus::Stopped);
            Logger::info("[NFSDK2] Starting netfilter driver");
            service.Start();
        } else if (service.GetStatus() == ServiceStatus::Stopped) {
            Logger::info("[NFSDK2] Starting netfilter driver");
            service.Start();
        }

        QString path = QDir::toNativeSeparators(Utils::getConfigPath() + "/bin/Redirector.exe");
        QStringList param;
        QString process = ModeHelper::readProcess(helper->getModeSettings().redirectorMode);
        param << "-r" << QString("127.0.0.1:%1").arg(QString::number(helper->getInboundSettings().socks5LocalPort)) << "-p" << process << "-t" << QString::number(helper->getInboundSettings().redirectorPort);

        m_process = std::make_unique<QProcess>();
        m_process->moveToThread(this);
        m_process->start(path, param);

        break;
    }
}

void NFSDK2Thread::stop()
{
    if (m_process)
        m_process->kill();
}
